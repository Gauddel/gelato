// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ExampleEntity entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ExampleEntity entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ExampleEntity", id.toString(), this);
  }

  static load(id: string): ExampleEntity | null {
    return store.get("ExampleEntity", id) as ExampleEntity | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get executor(): Bytes {
    let value = this.get("executor");
    return value.toBytes();
  }

  set executor(value: Bytes) {
    this.set("executor", Value.fromBytes(value));
  }

  get taskReceiptId(): BigInt {
    let value = this.get("taskReceiptId");
    return value.toBigInt();
  }

  set taskReceiptId(value: BigInt) {
    this.set("taskReceiptId", Value.fromBigInt(value));
  }
}

export class Provider extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Provider entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Provider entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Provider", id.toString(), this);
  }

  static load(id: string): Provider | null {
    return store.get("Provider", id) as Provider | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get users(): Array<Bytes> | null {
    let value = this.get("users");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set users(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("users");
    } else {
      this.set("users", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}

export class Executor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Executor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Executor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Executor", id.toString(), this);
  }

  static load(id: string): Executor | null {
    return store.get("Executor", id) as Executor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get providers(): Array<Bytes> | null {
    let value = this.get("providers");
    if (value === null) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set providers(value: Array<Bytes> | null) {
    if (value === null) {
      this.unset("providers");
    } else {
      this.set("providers", Value.fromBytesArray(value as Array<Bytes>));
    }
  }
}
